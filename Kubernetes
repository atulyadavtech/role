##Docker Installation 
dpkg --configure -a
wget -O - https://get.docker.com | bash
#Docker version 19.03.8, build afacb8b7f0

cat > /etc/docker/daemon.json <<EOF
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2"
}
EOF


docker info | grep -i cgroup

systemctl enable docker;systemctl start  docker

## Enviorment Files
wget https://raw.githubusercontent.com/atulyadavtech/ganana/master/limits.conf -O /etc/security/limits.conf
wget https://raw.githubusercontent.com/atulyadavtech/Conf-Files/master/ssh-csh -O /etc/profile.d/ssh.csh
wget https://raw.githubusercontent.com/atulyadavtech/Conf-Files/master/ssh-sh -O /etc/profile.d/ssh.sh
wget https://raw.githubusercontent.com/atulyadavtech/Conf-Files/master/history-sh -O /etc/profile.d/history.sh

##Enable the br_netfilter module for cluster communication.
echo "net/bridge/bridge-nf-call-ip6tables = 1" >> /etc/ufw/sysctl.conf
echo "net/bridge/bridge-nf-call-iptables = 1" >> /etc/ufw/sysctl.conf
echo "net/bridge/bridge-nf-call-arptables = 1" >> /etc/ufw/sysctl.conf

modprobe br_netfilter
echo '1' > /proc/sys/net/bridge/bridge-nf-call-iptables

sysctl -p

## Swap Disbaled
swapoff -a
sed -i -e 's|'/swap.img'|'#/swap.img'|' /etc/fstab

## Packages Installation 
apt-get install apt-transport-https curl nfs-kernel-server -y

apt-get install -y singularity-container 

## SUDO User Setup
echo "locuz ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers


##Kubernetes Installation

curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add
apt-add-repository "deb https://apt.kubernetes.io/ kubernetes-xenial main"

#Kubernetes version: v1.18.2
apt-get install kubeadm -y

cat > /etc/profile.d/kube.config <<EOF
export KUBECONFIG=/etc/kubernetes/admin.conf
EOF

kubeadm init --pod-network-cidr=172.31.0.0/16 --apiserver-advertise-address=$(hostname -I | cut -d" " -f1)

#Dashboard Installation And Configuration
kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml

# Check existing secrets in kubernetes-dashboard namespace
kubectl -n kubernetes-dashboard get secret
Create the dashborad admin role
cat > /root/dashboard-adminuser.yml <<EOF
apiVersion: v1
kind: ServiceAccount
metadata:
  name: admin-user
  namespace: kube-system
EOF

kubectl apply -f dashboard-adminuser.yml

kubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | grep admin-user | awk '{print $1}')

#helm Installation & Configuration

#cloud-native storage orchestrator
 

#mkdir -p $HOME/.kube
#cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
#chown $(id -u):$(id -g) $HOME/.kube/config

kubectl config view

kubectl version

kubectl apply -f https://docs.projectcalico.org/v3.9/manifests/calico.yaml

kubectl get nodes

kubectl get deployments

kubectl get pods
