##Docker Installation 
dpkg --configure -a
apt autoremove -y
apt --fix-broken install

## Packages Installation 
apt-get install apt-transport-https curl nfs-kernel-server -y
apt-get update && apt-get install -y apt-transport-https ca-certificates curl software-properties-common

echo "/home   *(rw,sync,no_root_squash,no_subtree_check) " >> /etc/exports

# Install NFS Server
apt install -y nfs-common


## Docker Installation
apt-get install docker.io
apt-get install docker.io=18\* -y
docker version --format '{{.Server.Version}}'

##
ZDR1Nmk4cnBjaGg3NGw1MzAzN3M5cmk4YWo6NmMwYzBiYWUtNjYxZC00N2JjLWIxMTctY2Q3YzVhNzJiZTQw
##


#Latest validated version: 18.09
#DockerIO 19.03.6
#wget -O - https://get.docker.com | bash
#Docker version 19.03.8, build afacb8b7f0


# Set up the Docker daemon
cat > /etc/docker/daemon.json <<EOF
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2"
}
EOF


docker info | grep -i cgroup

systemctl enable docker;systemctl start  docker

## Enviorment Files
wget https://raw.githubusercontent.com/atulyadavtech/ganana/master/limits.conf -O /etc/security/limits.conf
wget https://raw.githubusercontent.com/atulyadavtech/Conf-Files/master/ssh-csh -O /etc/profile.d/ssh.csh
wget https://raw.githubusercontent.com/atulyadavtech/Conf-Files/master/ssh-sh -O /etc/profile.d/ssh.sh
wget https://raw.githubusercontent.com/atulyadavtech/Conf-Files/master/history-sh -O /etc/profile.d/history.sh

##Enable the br_netfilter module for cluster communication.
echo "net/bridge/bridge-nf-call-ip6tables = 1" >> /etc/ufw/sysctl.conf
echo "net/bridge/bridge-nf-call-iptables = 1" >> /etc/ufw/sysctl.conf
echo "net/bridge/bridge-nf-call-arptables = 1" >> /etc/ufw/sysctl.conf

modprobe br_netfilter
echo '1' > /proc/sys/net/bridge/bridge-nf-call-iptables

sysctl -p

## Swap Disbaled
swapoff -a
sed -i -e 's|'/swap.img'|'#/swap.img'|' /etc/fstab


apt-get install -y singularity-container 

## SUDO User Setup
echo "locuz ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers


##Kubernetes Installation

curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add
apt-add-repository "deb https://apt.kubernetes.io/ kubernetes-xenial main"

#Kubernetes version: v1.18.2
apt-get install kubeadm -y
apt autoremove -y
kubectl version --short
#Client Version: v1.18.2
#Server Version: v1.18.2


#For Version 1.15
apt-get install kubeadm=1.15\* kubelet=1.15\* kubeadm=1.15\*
curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.15.11/bin/linux/amd64/kubectl


##
apt-get install -y kubelet=1.13.3-00 kubeadm=1.13.3-00 kubectl=1.13.3-00 kubernetes-cni=0.6.0-00
kubeadm config images pull
apt-mark hold kubelet kubeadm kubectl kubernetes-cni

cat /etc/systemd/system/multi-user.target.wants/kubelet.service
[Unit]
Description=kubelet: The Kubernetes Node Agent
Documentation=https://kubernetes.io/docs/home/

[Service]
ExecStart=/usr/bin/kubelet --runtime-cgroups=/systemd/system.slice --kubelet-cgroups=/systemd/system.slice
Restart=always
StartLimitInterval=0
RestartSec=10

[Install]
WantedBy=multi-user.target


# Restart services
systemctl daemon-reload
systemctl restart docker
systemctl restart kubelet


cat > /etc/profile.d/kube.config <<EOF
export KUBECONFIG=/etc/kubernetes/admin.conf
EOF

kubeadm init --pod-network-cidr=172.31.0.0/16 --apiserver-advertise-address=$(hostname -I | cut -d" " -f1)

mkdir -p $HOME/.kube
cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
chown $(id -u):$(id -g) $HOME/.kube/config

#Dashboard Installation And Configuration
kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0/aio/deploy/recommended.yaml
kubectl create serviceaccount dashboard-admin-sa
kubectl create clusterrolebinding dashboard-admin-sa --clusterrole=cluster-admin --serviceaccount=default:dashboard-admin-sa
kubectl describe secret $(kubectl get secrets | grep -i admin  | awk '{print $1}')

## Network
kubectl apply -f https://docs.projectcalico.org/v3.9/manifests/calico.yaml

kubeadm token create --print-join-command


kubectl apply -f https://raw.githubusercontent.com/google/metallb/v0.7.3/manifests/metallb.yaml

metal_config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: metallb-system
  name: config
data:
  config: |
    address-pools:
    - name: default
      protocol: layer2
      addresses:
      - 192.168.126.152

kubectl apply -f metal_config.yaml
##############################3

kubeadm token create --print-join-command


## Ingress
kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-0.31.1/deploy/static/provider/baremetal/deploy.yaml

#helm Installation & Configuration
#Untaint all the nodes (this allows proper helm installation)
kubectl taint nodes --all node-role.kubernetes.io/master-
curl https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get | bash

#cloud-native storage orchestrator

kubectl config view

kubectl version

kubectl get nodes

kubectl get deployments

kubectl get pods
helm delete jhub --purge

kubectl logs  po/hub-559f57447-jf2l6 --namespace=jhub

#Alias
alias nodes='kubectl get nodes -o wide'

